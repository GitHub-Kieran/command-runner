name: Electron Build

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (optional)'
        required: false
        type: string

jobs:
  build-electron:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win32

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: src/CommandRunner.ReactWebsite/package-lock.json

    - name: Install dependencies
      working-directory: src/CommandRunner.ReactWebsite
      run: npm ci

    - name: Build React app
      working-directory: src/CommandRunner.ReactWebsite
      run: npm run build-electron-build

    - name: Build Electron app (Linux)
      if: matrix.platform == 'linux'
      working-directory: src/CommandRunner.ReactWebsite
      run: |
        echo "Building Linux Electron app..."
        echo "This will create both AppImage and .deb packages"
        echo "Note: AppImage may have sandbox issues - use .deb for better compatibility"
        npm run build-electron-linux

    - name: Build Electron app (Windows)
      if: matrix.platform == 'win32'
      working-directory: src/CommandRunner.ReactWebsite
      run: |
        echo "Building Windows Electron app..."
        echo "This will create a .exe installer"
        npm run build-electron-win

    - name: Verify build output (Linux)
      if: matrix.platform == 'linux'
      run: |
        echo "=== LINUX BUILD VERIFICATION ==="
        echo "Build output directory:"
        ls -la src/CommandRunner.ReactWebsite/dist-electron/
        echo ""
        echo "Package files found:"
        find src/CommandRunner.ReactWebsite/dist-electron/ -name "*.deb" -o -name "*.AppImage" -o -name "*Runner.sh" -o -name "*Runner.desktop" -o -name "*.md" | head -10
        echo ""
        echo "Package sizes:"
        echo "AppImage (may have sandbox issues):"
        du -sh "src/CommandRunner.ReactWebsite/dist-electron/CommandRunner-0.0.0.AppImage" 2>/dev/null || echo "  AppImage not found"
        echo ".deb package (recommended for Linux):"
        du -sh "src/CommandRunner.ReactWebsite/dist-electron/commandrunner-reactwebsite_0.0.0_amd64.deb" 2>/dev/null || echo "  .deb not found"
        echo "Wrapper script (alternative for AppImage):"
        du -sh "src/CommandRunner.ReactWebsite/dist-electron/CommandRunner.sh" 2>/dev/null || echo "  Wrapper script not found"
        echo "Desktop file (for system integration):"
        du -sh "src/CommandRunner.ReactWebsite/dist-electron/CommandRunner.desktop" 2>/dev/null || echo "  Desktop file not found"
        echo "Linux README (installation instructions):"
        ls -la "src/CommandRunner.ReactWebsite/dist-electron/README-Linux.md" 2>/dev/null || echo "  README not found"
        echo ""
        echo "=== RECOMMENDATION ==="
        echo "For Linux users: Use the .deb package or the .sh wrapper script"
        echo "The .deb package doesn't have sandbox issues and integrates better with the system"

    - name: Verify build output (Windows)
      if: matrix.platform == 'win32'
      shell: pwsh
      run: |
        Write-Host "=== WINDOWS BUILD VERIFICATION ==="
        Write-Host "Build output directory:"
        Get-ChildItem src/CommandRunner.ReactWebsite/dist-electron/
        Write-Host ""
        Write-Host "Windows installer files:"
        Get-ChildItem src/CommandRunner.ReactWebsite/dist-electron/ -Name *.exe | Select-Object -First 10
        Write-Host ""
        Write-Host "Build sizes:"
        Get-ChildItem src/CommandRunner.ReactWebsite/dist-electron/*.exe | ForEach-Object {
          $sizeMB = [math]::Round($_.Length / 1MB, 2)
          Write-Host "$sizeMB MB - $($_.Name)"
        }
        Write-Host ""
        Write-Host "=== WINDOWS INSTALLER INFO ==="
        Write-Host "The .exe file is a standard Windows installer"
        Write-Host "It includes the API server and will auto-start it when the app runs"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: command-runner-${{ matrix.platform }}-${{ github.run_number }}
        path: |
          src/CommandRunner.ReactWebsite/dist-electron/
        retention-days: 30

    - name: Create Release (on tag push)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          src/CommandRunner.ReactWebsite/dist-electron/**/*.{exe,deb,AppImage,dmg}
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup-workflow-run-logs:
    needs: build-electron
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
    - name: Cleanup workflow run logs
      uses: igorjs/gh-actions-clean-workflow@v4
      with:
        days_old: "7"
        runs_to_keep: "5"